### Starting build.
# Target: test.ml.depends, tags: { package(ANSITerminal), package(core), package(lambdasoup), package(mechaml), package(oUnit), package(yojson), debug, extension:ml, file:test.ml, ocaml, ocamldep, quiet, thread, traverse }
ocamlfind ocamldep -package core -package lambdasoup -package yojson -package oUnit -package ANSITerminal -package mechaml -modules test.ml > test.ml.depends
# Target: engine.mli.depends, tags: { package(ANSITerminal), package(core), package(lambdasoup), package(mechaml), package(oUnit), package(yojson), debug, extension:mli, file:engine.mli, ocaml, ocamldep, quiet, thread, traverse }
ocamlfind ocamldep -package core -package lambdasoup -package yojson -package oUnit -package ANSITerminal -package mechaml -modules engine.mli > engine.mli.depends # cached
# Target: engine.cmi, tags: { package(ANSITerminal), package(core), package(lambdasoup), package(mechaml), package(oUnit), package(yojson), byte, compile, debug, extension:mli, file:engine.mli, interf, ocaml, quiet, thread, traverse }
ocamlfind ocamlc -c -g -thread -package core -package lambdasoup -package yojson -package oUnit -package ANSITerminal -package mechaml -o engine.cmi engine.mli
# Target: test.cmo, tags: { package(ANSITerminal), package(core), package(lambdasoup), package(mechaml), package(oUnit), package(yojson), byte, compile, debug, extension:cmo, extension:ml, file:test.cmo, file:test.ml, implem, ocaml, quiet, thread, traverse }
ocamlfind ocamlc -c -g -thread -package core -package lambdasoup -package yojson -package oUnit -package ANSITerminal -package mechaml -o test.cmo test.ml
+ ocamlfind ocamlc -c -g -thread -package core -package lambdasoup -package yojson -package oUnit -package ANSITerminal -package mechaml -o test.cmo test.ml
File "test.ml", line 5, characters 45-61:
5 |   "test 1" >:: fun _ -> assert_equal 282.97 (Engine.get_price "hi" 2);
                                                 ^^^^^^^^^^^^^^^^
Error: Unbound value Engine.get_price
Command exited with code 2.
# Compilation unsuccessful.
